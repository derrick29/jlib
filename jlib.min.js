var $ = (function() {
  "use strict";
  var e = function(e) {
    e &&
      (e === document
        ? (this.elems = [document])
        : e === window
        ? (this.elems = [window])
        : (this.elems = document.querySelectorAll(e)));
  };
  (e.prototype.each = function(e) {
    if (e && "function" == typeof e) {
      for (let t = 0; t < this.elems.length; t++) e(this.elems[t], t);
      return this;
    }
  }),
    (e.prototype.addClass = function(e) {
      return (
        this.each(function(t) {
          t.classList.add(e);
        }),
        this
      );
    }),
    (e.prototype.removeClass = function(e) {
      return (
        this.each(function(t) {
          t.classList.remove(e);
        }),
        this
      );
    }),
    (e.prototype.class = function(e) {
      let t;
      return (
        this.each(function(o) {
          e && (o.className = e), (t = o.className);
        }),
        t
      );
    }),
    (e.prototype.on = function(e, t) {
      return (
        this.each(function(o) {
          o["on" + e] = t;
        }),
        this
      );
    }),
    (e.prototype.html = function(e) {
      let t = "";
      return (
        this.each(function(o) {
          e && (o.innerHTML = e), (t = o.innerHTML);
        }),
        t
      );
    }),
    (e.prototype.value = function(e) {
      let t;
      return (
        this.each(function(o) {
          e && (o.value = e), (t = o.value);
        }),
        t
      );
    }),
    (e.prototype.ready = function(e) {
      this.each(function(t) {
        if (t === document) {
          let o = setInterval(function() {
            "complete" === t.readyState &&
              (clearInterval(o),
              console.log(
                "%cWelcome to %cJLib %c\n---\x3e %chttps://github.com/derrick29/jlib",
                "color: teal; font-size: 20px",
                "color: black; font-size: 30px; text-shadow: 0 0 8px grey",
                "color: teal; font-size: 10px",
                "color: black; font-size: 10px"
              ),
              e());
          }, 100);
        } else
          console.error(
            "%cError: $(selector).ready(fn) is only for the document...",
            "color: red; font-size: 10px"
          );
      });
    }),
    (e.prototype.fetch = function(e, t) {
      let o,
        n = e.url,
        c = e.method,
        s = e.contentType,
        r = e.data,
        i = r;
      switch (((o = new XMLHttpRequest()).open(c, n, !0), s)) {
        case "application/json":
          o.setRequestHeader("Content-Type", "application/json"),
            (i = JSON.stringify(r));
          break;
        case urlForm:
          let e = new FormData();
          Object.keys(r).map(t => {
            e.append(d, r[e]);
          }),
            console.log(e),
            o.setRequestHeader(
              "Content-type",
              "application/x-www-form-urlencoded"
            );
      }
      (o.onload = function() {
        200 == this.status && t(this.responseText);
      }),
        "POST" == c ? o.send(i) : o.send();
    });
  return function(t) {
    return new e(t);
  };
})();
