var _ = (function() {
  "use strict";
  var t = function(t) {
    t &&
      (t === document
        ? (this.elems = [document])
        : t === window
        ? (this.elems = [window])
        : (this.elems = document.querySelectorAll(t)));
  };
  (t.prototype.each = function(t) {
    if (t && "function" == typeof t) {
      for (let e = 0; e < this.elems.length; e++) t(this.elems[e], e);
      return this;
    }
  }),
    (t.prototype.addClass = function(t) {
      return (
        this.each(function(e) {
          e.classList.add(t);
        }),
        this
      );
    }),
    (t.prototype.removeClass = function(t) {
      return (
        this.each(function(e) {
          e.classList.remove(t);
        }),
        this
      );
    }),
    (t.prototype.class = function(t) {
      let e;
      return (
        this.each(function(o) {
          t && (o.className = t), (e = o.className);
        }),
        e
      );
    }),
    (t.prototype.on = function(t, e) {
      return (
        this.each(function(o) {
          o["on" + t] = e;
        }),
        this
      );
    }),
    (t.prototype.html = function(t) {
      let e = "";
      return (
        this.each(function(o) {
          t && (o.innerHTML = t), (e = o.innerHTML);
        }),
        e
      );
    }),
    (t.prototype.value = function(t) {
      let e;
      return (
        this.each(function(o) {
          t && (o.value = t), (e = o.value);
        }),
        e
      );
    }),
    (t.prototype.ready = function(t) {
      this.each(function(e) {
        if (e === document) {
          let o = setInterval(function() {
            "complete" === e.readyState &&
              (clearInterval(o),
              console.log(
                "%cWelcome to %cJLib %c\n---\x3e %chttps://github.com/derrick29/jlib",
                "color: teal; font-size: 20px",
                "color: black; font-size: 30px; text-shadow: 0 0 8px grey",
                "color: teal; font-size: 10px",
                "color: black; font-size: 10px"
              ),
              t());
          }, 100);
        } else
          console.error(
            "%cError: $(selector).ready(fn) is only for the document...",
            "color: red; font-size: 10px"
          );
      });
    }),
    (t.prototype.fetch = function(t, e) {
      let o,
        n = t.url,
        s = t.method,
        c = "",
        i = t.data,
        r = i,
        l = "";
      if ("POST" == t.method) {
        switch (
          ((c = t.contentType), (o = new XMLHttpRequest()).open(s, n, !0), c)
        ) {
          case "application/json":
            o.setRequestHeader("Content-Type", "application/json"),
              (r = JSON.stringify(i));
            break;
          case "urlForm":
            Object.keys(i).map(t => {
              l += `${t}=${i[t]}&`;
            }),
              (l = l.substr(0, l.length - 1)),
              o.setRequestHeader(
                "Content-type",
                "application/x-www-form-urlencoded"
              );
        }
        (o.onload = function() {
          200 == this.status && e(this.responseText);
        }),
          "application/json" == c ? o.send(r) : o.send(l);
      }
    });
  return function(e) {
    return new t(e);
  };
})();
